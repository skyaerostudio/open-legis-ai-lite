'use client';

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { 
  FileText, 
  BookOpen, 
  Lightbulb, 
  Copy, 
  ExternalLink,
  AlertTriangle,
  CheckCircle
} from 'lucide-react';
import { useState } from 'react';

interface Glossary {
  term: string;
  definition: string;
}

interface Citation {
  text: string;
  source: string;
  page?: number;
}

interface DocumentSummaryData {
  summary: string;
  key_changes: string[];
  glossary: Glossary[];
  citations: Citation[];
  metadata: {
    total_clauses: number;
    processing_method: string;
    confidence_score: number;
  };
}

interface DocumentSummaryProps {
  summary: DocumentSummaryData;
  documentTitle: string;
  className?: string;
}

export default function DocumentSummary({ 
  summary, 
  documentTitle, 
  className = '' 
}: DocumentSummaryProps) {
  const [copiedItem, setCopiedItem] = useState<string | null>(null);

  const copyToClipboard = async (text: string, itemId: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedItem(itemId);
      setTimeout(() => setCopiedItem(null), 2000);
    } catch (error) {
      console.error('Failed to copy text:', error);
    }
  };

  const getConfidenceColor = (score: number) => {
    if (score >= 0.8) return 'text-green-600';
    if (score >= 0.6) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getConfidenceIcon = (score: number) => {
    if (score >= 0.8) return <CheckCircle className="h-4 w-4 text-green-600" />;
    if (score >= 0.6) return <AlertTriangle className="h-4 w-4 text-yellow-600" />;
    return <AlertTriangle className="h-4 w-4 text-red-600" />;
  };

  return (
    <div className={`space-y-6 ${className}`}>
      {/* Header with metadata */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-3">
            <FileText className="h-6 w-6" />
            <div className="flex-1">
              <h2 className="text-xl font-bold">Document Summary</h2>
              <p className="text-sm text-muted-foreground font-normal mt-1">
                {documentTitle}
              </p>
            </div>
            <div className="flex items-center space-x-2 text-sm">
              {getConfidenceIcon(summary.metadata.confidence_score)}
              <span className={getConfidenceColor(summary.metadata.confidence_score)}>
                {Math.round(summary.metadata.confidence_score * 100)}% confidence
              </span>
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-3 gap-4 text-sm">
            <div>
              <span className="font-medium">Total Clauses:</span>
              <div className="text-muted-foreground">{summary.metadata.total_clauses}</div>
            </div>
            <div>
              <span className="font-medium">Analysis Method:</span>
              <div className="text-muted-foreground capitalize">
                {summary.metadata.processing_method.replace('_', ' ')}
              </div>
            </div>
            <div>
              <span className="font-medium">Key Terms:</span>
              <div className="text-muted-foreground">{summary.glossary.length}</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* AI Disclaimer */}
      <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
        <div className="flex items-start space-x-3">
          <AlertTriangle className="h-5 w-5 text-yellow-600 mt-0.5" />
          <div className="text-sm">
            <p className="font-medium text-yellow-800">AI-Generated Summary</p>
            <p className="text-yellow-700 mt-1">
              This summary is generated by AI and should be verified against the official document. 
              Always refer to the original text for legal accuracy.
            </p>
          </div>
        </div>
      </div>

      {/* Main Summary */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <BookOpen className="h-5 w-5" />
              <span>Plain Language Summary</span>
            </div>
            <Button
              variant="outline"
              size="sm"
              onClick={() => copyToClipboard(summary.summary, 'summary')}
            >
              {copiedItem === 'summary' ? (
                <CheckCircle className="mr-2 h-4 w-4" />
              ) : (
                <Copy className="mr-2 h-4 w-4" />
              )}
              {copiedItem === 'summary' ? 'Copied!' : 'Copy'}
            </Button>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="prose prose-sm max-w-none">
            {summary.summary.split('\n\n').map((paragraph, index) => (
              <p key={index} className="mb-4 text-sm leading-relaxed">
                {paragraph}
              </p>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Key Changes */}
      {summary.key_changes.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Lightbulb className="h-5 w-5" />
              <span>Key Changes & Provisions</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {summary.key_changes.map((change, index) => (
                <div key={index} className="flex items-start space-x-3">
                  <div className="flex-shrink-0 w-6 h-6 bg-primary/10 text-primary rounded-full flex items-center justify-center text-xs font-medium">
                    {index + 1}
                  </div>
                  <p className="text-sm leading-relaxed flex-1">{change}</p>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Glossary */}
      {summary.glossary.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <BookOpen className="h-5 w-5" />
              <span>Legal Terms Glossary</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid gap-4 md:grid-cols-2">
              {summary.glossary.map((item, index) => (
                <div key={index} className="border border-border rounded-lg p-4 space-y-2">
                  <div className="flex items-center justify-between">
                    <h4 className="font-semibold text-sm">{item.term}</h4>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => copyToClipboard(`${item.term}: ${item.definition}`, `glossary-${index}`)}
                    >
                      {copiedItem === `glossary-${index}` ? (
                        <CheckCircle className="h-3 w-3" />
                      ) : (
                        <Copy className="h-3 w-3" />
                      )}
                    </Button>
                  </div>
                  <p className="text-xs text-muted-foreground leading-relaxed">
                    {item.definition}
                  </p>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Citations */}
      {summary.citations.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <ExternalLink className="h-5 w-5" />
              <span>Legal References & Citations</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {summary.citations.map((citation, index) => (
                <div key={index} className="border-l-4 border-primary/20 pl-4 py-2">
                  <p className="text-sm font-medium">"{citation.text}"</p>
                  <div className="flex items-center justify-between mt-2">
                    <p className="text-xs text-muted-foreground">
                      Source: {citation.source}
                      {citation.page && ` (Page ${citation.page})`}
                    </p>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => copyToClipboard(
                        `"${citation.text}" - ${citation.source}${citation.page ? ` (Page ${citation.page})` : ''}`, 
                        `citation-${index}`
                      )}
                    >
                      {copiedItem === `citation-${index}` ? (
                        <CheckCircle className="h-3 w-3" />
                      ) : (
                        <Copy className="h-3 w-3" />
                      )}
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Export Options */}
      <Card>
        <CardContent className="pt-6">
          <div className="flex flex-wrap gap-2">
            <Button
              variant="outline"
              onClick={() => copyToClipboard(
                `# ${documentTitle}\n\n## Summary\n${summary.summary}\n\n## Key Changes\n${summary.key_changes.map((c, i) => `${i + 1}. ${c}`).join('\n')}\n\n## Glossary\n${summary.glossary.map(g => `**${g.term}**: ${g.definition}`).join('\n\n')}`,
                'full-markdown'
              )}
            >
              {copiedItem === 'full-markdown' ? (
                <CheckCircle className="mr-2 h-4 w-4" />
              ) : (
                <Copy className="mr-2 h-4 w-4" />
              )}
              Copy as Markdown
            </Button>
            
            <Button variant="outline">
              <ExternalLink className="mr-2 h-4 w-4" />
              Share Summary
            </Button>
            
            <Button variant="outline">
              <FileText className="mr-2 h-4 w-4" />
              Export PDF
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}